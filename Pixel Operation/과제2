#include<stdio.h>
#include<stdlib.h>
#include<string.h> 
#pragma warning(disable:4996)
#define _CRT_SECURE_NO_WARNINGS
#include <windows.h>

int main(int argc, char* argv[]) {

	double Y,Y1,Y2;
	BITMAPFILEHEADER bmpFile;
	BITMAPINFOHEADER bmpInfo;
	FILE* inputFile, * inputFile2 = NULL;
	inputFile = fopen("AICenter.bmp", "rb");
	inputFile2 = fopen("circle1.bmp", "rb");
	fread(&bmpFile, sizeof(BITMAPFILEHEADER), 1, inputFile);
	fread(&bmpInfo, sizeof(BITMAPINFOHEADER), 1, inputFile);
	fread(&bmpFile, sizeof(BITMAPFILEHEADER), 1, inputFile2);
	fread(&bmpInfo, sizeof(BITMAPINFOHEADER), 1, inputFile2);

	int width = bmpInfo.biWidth;
	int height = bmpInfo.biHeight;
	int size = bmpInfo.biSizeImage;
	int bitCnt = bmpInfo.biBitCount;
	int stride = (((bitCnt / 8) * width) + 3) / 4 * 4;
	printf("W: %d(%d)\nH: %d\nS:%d\nD: %d\n\n", width, stride, height, size, bitCnt);

	unsigned char* inputImg = NULL,*inputImg2=NULL, * outputImg = NULL,*outputImg2=NULL;
	inputImg = (unsigned char*)calloc(size, sizeof(unsigned char));
	inputImg2 = (unsigned char*)calloc(size, sizeof(unsigned char));
	outputImg = (unsigned char*)calloc(size, sizeof(unsigned char));
	outputImg2 = (unsigned char*)calloc(size, sizeof(unsigned char));

	fread(inputImg, sizeof(unsigned char), size, inputFile);
	fread(inputImg2, sizeof(unsigned char), size, inputFile2);

	for (int j = 0; j < height; j++)
	{
		for (int i = 0; i < width; i++) {
			Y1 = 0.299 * inputImg[j * stride + 3 * i + 2] + 0.587 * inputImg[j * stride + 3 * i + 1] + 0.114 * inputImg[j * stride + 3 * i + 0];
			Y2 = 0.299 * inputImg2[j * stride + 3 * i + 2] + 0.587 * inputImg2[j * stride + 3 * i + 1] + 0.114 * inputImg2[j * stride + 3 * i + 0];
			Y = Y1+Y2;

			outputImg[j * stride + 3 * i + 2] = (unsigned char)(Y > 255 ? 0 : Y-Y2);
			outputImg[j * stride + 3 * i + 1] = (unsigned char)(Y > 255 ? 0 : Y - Y2);
			outputImg[j * stride + 3 * i + 0] = (unsigned char)(Y > 255 ? 0 : Y - Y2);

			outputImg2[j * stride + 3 * i + 2] = (unsigned char)(Y < 255 ? 0 : Y-Y2);
			outputImg2[j * stride + 3 * i + 1] = (unsigned char)(Y < 255 ? 0 :  Y-Y2);
			outputImg2[j * stride + 3 * i + 0] = (unsigned char)(Y < 255 ? 0 : Y-Y2);

			outputImg[j * stride + 3 * i + 0] = inputImg[j * stride + 3 * i + 0]+ inputImg2[j * stride + 3 * i + 0]; //Blue
			outputImg[j * stride + 3 * i + 1] = inputImg[j * stride + 3 * i + 1]+ inputImg2[j * stride + 3 * i + 1]; //Green
			outputImg[j * stride + 3 * i + 2] = inputImg[j * stride + 3 * i + 2]+ inputImg2[j * stride + 3 * i + 2]; //Red
			
  		}
	}



	FILE* outputFile = fopen("work1.bmp", "wb");
	FILE* outputFile2 = fopen("work2.bmp", "wb");
	fwrite(&bmpFile, sizeof(BITMAPFILEHEADER), 1, outputFile);
	fwrite(&bmpInfo, sizeof(BITMAPINFOHEADER), 1, outputFile);
	fwrite(outputImg, sizeof(unsigned char), size, outputFile);

	fwrite(&bmpFile, sizeof(BITMAPFILEHEADER), 1, outputFile2);
	fwrite(&bmpInfo, sizeof(BITMAPINFOHEADER), 1, outputFile2);
	fwrite(outputImg2, sizeof(unsigned char), size, outputFile2);

	free(outputImg);
	free(outputImg2);

	free(inputImg);
	free(inputImg2);
	fclose(inputFile);
	fclose(outputFile);
}
